arr=list(map(int,input().split()))

input ek string type ka hoga, usko split krdo toh wo list of substring

map applies int() to each ele of list
The map(function_name,list) function returns an iterator

--------------------------------------
You're right that int is a type in Python, 
but it also behaves like a function when used in certain contexts. 
In Python, types like int, float, and str can be called as functions 
because they have constructors that convert values into that type.
Why int Works in map(int, iterable)
- int("10") → The int type is callable, 
meaning you can use it like a function to convert a string "10" into an integer 10.
- When passed to map(int, iterable), 
Python applies int() to each item in the iterable,
effectively calling int(item) for each element.

----------------------------------
How to Know If Something Can Be Converted to a List
Most iterables can be converted into a list, but not everything. Here are common examples:
✅ Can be converted to a list:
- map() → list(map(int, ["1", "2", "3"])) → [1, 2, 3]
- range() → list(range(5)) → [0, 1, 2, 3, 4]
- zip() → list(zip([1, 2], ["a", "b"])) → [(1, 'a'), (2, 'b')]
- dict.keys() → list({"a": 1, "b": 2}.keys()) → ['a', 'b']

----------------------------
can use for loop of ele instead of list too:

numbers = ["1", "2", "3", "4"]
mapped_result = map(int, numbers)  # Iterator

for num in mapped_result:
    print(num)  # Prints each converted integer one by one

--------------------------------

Yes, both iterators and iterables can be used in a Python for loop.

A for loop in Python works with any iterable (like lists, tuples, strings, sets, dictionaries, generators, etc.).
If you pass an iterator (like the result of map(), iter(list), or a generator), the for loop will consume it one item at a time.


-------------------------------

Great question! Here’s why Python has both iterables and iterators:

1. Convenience and Reusability
Iterables (like lists, strings, etc.) can be looped over multiple times.
You can start a new loop from the beginning each time.
Iterators can only be looped over once. After you reach the end, they’re exhausted.
Example:

nums = [1, 2, 3]  # Iterable
for x in nums:    # Works every time
    print(x)
for x in nums:    # Works again from the start
    print(x)

it = iter(nums)   # Iterator
for x in it:
    print(x)
for x in it:      # Does nothing! Iterator is exhausted
    print(x)

2. Efficiency
Iterables can store all data in memory (like a list), or generate data on the fly (like range()).
Iterators are useful for processing large or infinite data streams, one item at a time, without storing everything in memory.

3. Separation of Concerns
Iterable: Just needs to know how to create an iterator (__iter__()).
Iterator: Needs to know how to get the next item (__next__()).
This separation makes Python’s design flexible and powerful.

Summary:

Iterables let you create new iterators as needed and can be reused.
Iterators are for one-time, step-by-step processing.
Having both gives you more control, flexibility, and efficiency in your code.
------------------------------

Why __iter__ and __next__, but we call iter() and next()?
Methods with double underscores (like __iter__ and __next__) are called “dunder” methods or magic methods.
Python’s built-in functions (iter(), next()) call these magic methods behind the scenes.
iter(obj) calls obj.__iter__()
next(obj) calls obj.__next__()
Why?
This lets you use a simple, clean syntax (for x in ..., next(), iter()) while Python handles the details.
Magic methods make objects compatible with Python’s language features.

--------------------

In short:

Iterable = reusable, iterator = one-time use.
They’re separate for flexibility and efficiency.
__iter__ and __next__ are special methods; iter() and next() are the user-friendly ways to use them.