1939. Users That Actively Request Confirmation Messages

Table: Signups

+----------------+----------+
| Column Name    | Type     |
+----------------+----------+
| user_id        | int      |
| time_stamp     | datetime |
+----------------+----------+
user_id is the primary key for this table.
Each row contains information about the signup time for the user with ID user_id.

Table: Confirmations

+----------------+----------+
| Column Name    | Type     |
+----------------+----------+
| user_id        | int      |
| time_stamp     | datetime |
| action         | ENUM     |
+----------------+----------+
(user_id, time_stamp) is the primary key for this table.
user_id is a foreign key with a reference to the Signups table.
action is an ENUM of the type ('confirmed', 'timeout')
Each row of this table indicates that the user with ID user_id requested a confirmation message at time_stamp and that confirmation message was either confirmed ('confirmed') or expired without confirming ('timeout').

Write an SQL query to find the IDs of the users that requested a confirmation message twice within a 24-hour window. 
Two messages exactly 24 hours apart are considered to be within the window. 
The action does not affect the answer, only the request time.

Return the result table in any order.

The query result format is in the following example:

Example 1:

Input: 
Confirmations table:
+---------+---------------------+-----------+
| user_id | time_stamp         | action    |
+---------+---------------------+-----------+
| 3       | 2021-01-06 03:30:46 | timeout   |
| 3       | 2021-01-06 03:37:45 | timeout   |
| 7       | 2021-06-12 11:57:29 | confirmed |
| 7       | 2021-06-13 11:57:30 | confirmed |
| 2       | 2021-01-22 00:00:00 | confirmed |
| 2       | 2021-01-23 00:00:00 | timeout   |
| 6       | 2021-10-23 14:14:14 | confirmed |
| 6       | 2021-10-24 14:14:13 | timeout   |
+---------+---------------------+-----------+

Output: 
+---------+
| user_id |
+---------+
| 2       |
| 3       |
| 6       |
+---------+

Explanation: 
User 2: The two messages are exactly 24 hours apart.
User 3: The two messages are 6 minutes and 59 seconds apart.
User 6: The two messages are 23 hours, 59 minutes, and 59 seconds apart.
User 7: The two messages are 24 hours and 1 second apart, so we exclude them from the result.

--------------------------

SELECT DISTINCT user_id
FROM (
    SELECT 
        user_id,
        time_stamp,
        LEAD(time_stamp) OVER (PARTITION BY user_id ORDER BY time_stamp) AS next_time
    FROM Confirmations
) sub
WHERE TIMESTAMPDIFF(SECOND, time_stamp, next_time) <= 86400;

OR BETTER , SELF JOIN AND PAIR WITH ALL LESSER OR MORE ONES AND CHECK

SELECT DISTINCT c1.user_id
FROM Confirmations c1
JOIN Confirmations c2 
  ON c1.user_id = c2.user_id 
  AND c1.time_stamp < c2.time_stamp 
  AND TIMESTAMPDIFF(SECOND, c1.time_stamp, c2.time_stamp) <= 86400;

------------------------------

from pyspark.sql.functions import col, lead, unix_timestamp
from pyspark.sql.window import Window

# Define window specification
window_spec = Window.partitionBy("user_id").orderBy("time_stamp")

# Add next timestamp for each user
df_with_next = df.withColumn(
    "next_time",
    lead("time_stamp").over(window_spec)
)

# Calculate time difference in seconds and filter
df_with_diff = df_with_next.withColumn(
    "time_diff_seconds",
    unix_timestamp("next_time") - unix_timestamp("time_stamp")
)

# Get users with messages within 24 hours
result_df = df_with_diff.filter(
    col("time_diff_seconds") <= 86400
).select("user_id").distinct()

OR

from pyspark.sql.functions import col, unix_timestamp

# Self join approach
result_df = df.alias("c1").join(
    df.alias("c2"),
    (col("c1.user_id") == col("c2.user_id")) &
    (col("c1.time_stamp") < col("c2.time_stamp")) &
    (unix_timestamp("c2.time_stamp") - unix_timestamp("c1.time_stamp") <= 86400)
).select("c1.user_id").distinct()
