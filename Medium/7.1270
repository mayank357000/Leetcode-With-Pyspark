1270. All People Report to the Given Manager
SQL Schema 
Table: Employees

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| employee_id   | int     |
| employee_name | varchar |
| manager_id    | int     |
+---------------+---------+
employee_id is the primary key for this table.
Each row of this table indicates that the employee with ID employee_id and name employee_name reports his work to his/her direct manager with manager_id
The head of the company is the employee with employee_id = 1.

Write an SQL query to find employee_id of all employees that directly or indirectly report their work to the head of the company.

The indirect relation between managers will not exceed 3 managers as the company is small.

Return result table in any order without duplicates.

The query result format is in the following example:

Employees table:
+-------------+---------------+------------+
| employee_id | employee_name | manager_id |
+-------------+---------------+------------+
| 1           | Boss          | 1          |
| 3           | Alice         | 3          |
| 2           | Bob           | 1          |
| 4           | Daniel        | 2          |
| 7           | Luis          | 4          |
| 8           | Jhon          | 3          |
| 9           | Angela        | 8          |
| 77          | Robert        | 1          |
+-------------+---------------+------------+

Result table:
+-------------+
| employee_id |
+-------------+
| 2           |
| 77          |
| 4           |
| 7           |
+-------------+

The head of the company is the employee with employee_id 1.
The employees with employee_id 2 and 77 report their work directly to the head of the company.
The employee with employee_id 4 report his work indirectly to the head of the company 4 --> 2 --> 1.
The employee with employee_id 7 report his work indirectly to the head of the company 7 --> 4 --> 2 --> 1.
The employees with employee_id 3, 8 and 9 don't report their work to head of company directly or indirectly.

---------------------------------

SELECT DISTINCT e.employee_id
FROM Employees e
LEFT JOIN Employees m1 ON e.manager_id = m1.employee_id
LEFT JOIN Employees m2 ON m1.manager_id = m2.employee_id
LEFT JOIN Employees m3 ON m2.manager_id = m3.employee_id
WHERE e.employee_id != 1 AND (
    e.manager_id = 1  /e.employee_id!=e.manager_id OR
    m1.manager_id = 1 OR
    m2.manager_id = 1
);

----------------------
from pyspark.sql import functions as F

# Start with base DataFrame: `employees_df`
e1 = employees_df.alias("e1")
e2 = employees_df.alias("e2")
e3 = employees_df.alias("e3")
e4 = employees_df.alias("e4")

result_df = (
    e1
    .join(e2, F.col("e1.manager_id") == F.col("e2.employee_id"), "left")
    .join(e3, F.col("e2.manager_id") == F.col("e3.employee_id"), "left")
    .join(e4, F.col("e3.manager_id") == F.col("e4.employee_id"), "left")
    .filter(
        (F.col("e1.employee_id") != 1) & (
            (F.col("e1.manager_id") == 1) |
            (F.col("e2.manager_id") == 1) |
            (F.col("e3.manager_id") == 1)
        )
    )
    .select(F.col("e1.employee_id"))
    .distinct()
)

