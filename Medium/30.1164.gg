1164. Product Price at a Given Date
Table: Products

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| product_id    | int     |
| new_price     | int     |
| change_date   | date    |
+---------------+---------+

(product_id, change_date) is the primary key 
(combination of columns with unique values) of this table.
Each row of this table indicates that the price of 
some product was changed to a new price at some date.
Initially, all products have price 10.

Write a solution to find the prices of all products on the date 2019-08-16.

Return the result table in any order.

The result format is in the following example.

Example 1:

Input: 
Products table:
+------------+-----------+-------------+
| product_id | new_price | change_date |
+------------+-----------+-------------+
| 1          | 20        | 2019-08-14  |
| 2          | 50        | 2019-08-14  |
| 1          | 30        | 2019-08-15  |
| 1          | 35        | 2019-08-16  |
| 2          | 65        | 2019-08-17  |
| 3          | 20        | 2019-08-18  |
+------------+-----------+-------------+

Output: 
+------------+-------+
| product_id | price |
+------------+-------+
| 2          | 50    |
| 1          | 35    |
| 3          | 10    |
+------------+-------+

------------------------------------------------
there can be some records which are only after
16 having changing price so their val should be 10
------------------------------------------------

WITH latest_price AS (
    SELECT 
        product_id,
        new_price,
        change_date,
        RANK() OVER (
            PARTITION BY product_id
            ORDER BY change_date DESC
        ) AS rnk
    FROM Products
    WHERE change_date <= '2019-08-16'
)
SELECT 
    p.product_id,
    COALESCE(lp.new_price, 10) AS price
FROM (SELECT DISTINCT product_id FROM Products) p #all pdts we get then <=16 changing we get in l join
LEFT JOIN latest_price lp
    ON p.product_id = lp.product_id AND lp.rnk = 1;

