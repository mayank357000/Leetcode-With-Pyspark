2228. Users With Two Purchases Within Seven Days
Description
Table: Purchases

+---------------+------+
| Column Name   | Type |
+---------------+------+
| purchase_id   | int  |
| user_id       | int  |
| purchase_date | date |
+---------------+------+

purchase_id is the primary key for this table

This table contains logs of the dates that users purchased from a certain retailer.

Write an SQL query to report the IDs of the users that made any two purchases 
at most 7 days apart.

Return the result table ordered by user_id.

The query result format is in the following example.

Example 1:

Input: 
Purchases table:
+-------------+---------+---------------+
| purchase_id | user_id | purchase_date |
+-------------+---------+---------------+
| 4           | 2       | 2022-03-13    |
| 1           | 5       | 2022-02-11    |
| 3           | 7       | 2022-06-19    |
| 6           | 2       | 2022-03-20    |
| 5           | 7       | 2022-06-19    |
| 2           | 2       | 2022-06-08    |
+-------------+---------+---------------+

Output: 
+---------+
| user_id |
+---------+
| 2       |
| 7       |
+---------+
Explanation: 
User 2 had two purchases on 2022-03-13 and 2022-03-20. Since the second purchase is within 7 days of the first purchase, we add their ID.
User 5 had only 1 purchase.
User 7 had two purchases on the same day so we add their ID.

--------------------------------

WITH ranked_purchases AS (
    SELECT 
        user_id,
        purchase_date,
        LEAD(purchase_date) OVER (PARTITION BY user_id ORDER BY purchase_date) AS next_date
    FROM Purchases
)
SELECT DISTINCT user_id
FROM ranked_purchases
WHERE next_date IS NOT NULL
  AND DATEDIFF(next_date, purchase_date) <= 7
ORDER BY user_id;

OR(all paris check)

SELECT DISTINCT p1.user_id
FROM Purchases p1
JOIN Purchases p2
  ON p1.user_id = p2.user_id
 AND p1.purchase_id <> p2.purchase_id
 AND ABS(DATEDIFF(p1.purchase_date, p2.purchase_date)) <= 7
ORDER BY p1.user_id;

------------------------------

from pyspark.sql import functions as F
from pyspark.sql.window import Window

user_window = Window.partitionBy("user_id").orderBy("purchase_date")

lead_df = purchases_df.withColumn(
    "next_date",
    F.lead("purchase_date").over(user_window)
)

lead_filtered = (
    lead_df
    .filter(F.col("next_date").isNotNull())
    .filter(F.datediff("next_date", "purchase_date") <= 7)
    .select("user_id")
    .distinct()
    .orderBy("user_id")
)

OR

joined_df = (
    purchases_df.alias("p1")
    .join(
        purchases_df.alias("p2"),
        on=[
            F.col("p1.user_id") == F.col("p2.user_id"),
            F.col("p1.purchase_id") != F.col("p2.purchase_id")
        ]
    )
    .filter(F.abs(F.datediff(F.col("p1.purchase_date"), F.col("p2.purchase_date"))) <= 7)
)

self_join_filtered = (
    joined_df
    .select(F.col("p1.user_id").alias("user_id"))
    .distinct()
    .orderBy("user_id")
)