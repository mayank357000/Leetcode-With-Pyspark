1308. Running Total for Different Genders
SQL Schema 
Table: Scores

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| player_name   | varchar |
| gender        | varchar |
| day           | date    |
| score_points  | int     |
+---------------+---------+

(gender, day) is the primary key for this table.
A competition is held between females team and males team.
Each row of this table indicates that a player_name and 
with gender has scored score_point in someday.
Gender is 'F' if the player is in females team and 'M' if the player is in males team.
 

Write an SQL query to find the total score for each gender at each day.

Order the result table by gender and day

The query result format is in the following example:

Scores table:
+-------------+--------+------------+--------------+
| player_name | gender | day        | score_points |
+-------------+--------+------------+--------------+
| Aron        | F      | 2020-01-01 | 17           |
| Alice       | F      | 2020-01-07 | 23           |
| Bajrang     | M      | 2020-01-07 | 7            |
| Khali       | M      | 2019-12-25 | 11           |
| Slaman      | M      | 2019-12-30 | 13           |
| Joe         | M      | 2019-12-31 | 3            |
| Jose        | M      | 2019-12-18 | 2            |
| Priya       | F      | 2019-12-31 | 23           |
| Priyanka    | F      | 2019-12-30 | 17           |
+-------------+--------+------------+--------------+

Result table:
+--------+------------+-------+
| gender | day        | total |
+--------+------------+-------+
| F      | 2019-12-30 | 17    |
| F      | 2019-12-31 | 40    |
| F      | 2020-01-01 | 57    |
| F      | 2020-01-07 | 80    |
| M      | 2019-12-18 | 2     |
| M      | 2019-12-25 | 13    |
| M      | 2019-12-30 | 26    |
| M      | 2019-12-31 | 29    |
| M      | 2020-01-07 | 36    |
+--------+------------+-------+
For females team:
First day is 2019-12-30, Priyanka scored 17 points and the total score for the team is 17.
Second day is 2019-12-31, Priya scored 23 points and the total score for the team is 40.
Third day is 2020-01-01, Aron scored 17 points and the total score for the team is 57.
Fourth day is 2020-01-07, Alice scored 23 points and the total score for the team is 80.
For males team:
First day is 2019-12-18, Jose scored 2 points and the total score for the team is 2.
Second day is 2019-12-25, Khali scored 11 points and the total score for the team is 13.
Third day is 2019-12-30, Salman scored 13 points and the total score for the team is 26.
Fourth day is 2019-12-31, Joe scored 3 points and the total score for the team is 29.
Fifth day is 2020-01-07, Bajrang scored 7 points and the total score for the team is 36.

------------------------------

SELECT 
  gender, 
  day, 
  SUM(score_points) OVER (
    PARTITION BY gender 
    ORDER BY day
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
  ) AS total
FROM Scores
ORDER BY gender, day;

------------
------------------------
For rolling sum we can do one more thing
either self join and for each record we can get records mathced less than date to it 
and then do sum

or similarly we can do correlated subquery where we for each record will match rows and sum
(pyspark don't support correlated subqueries so only for sql this way)
------------------

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, sum as sum_, to_date
from pyspark.sql.window import Window

# Sample data
data = [
    ("Aron", "F", "2020-01-01", 17),
    ("Alice", "F", "2020-01-07", 23),
    ("Bajrang", "M", "2020-01-07", 7),
    ("Khali", "M", "2019-12-25", 11),
    ("Slaman", "M", "2019-12-30", 13),
    ("Joe", "M", "2019-12-31", 3),
    ("Jose", "M", "2019-12-18", 2),
    ("Priya", "F", "2019-12-31", 23),
    ("Priyanka", "F", "2019-12-30", 17)
]
columns = ["player_name", "gender", "day", "score_points"]

spark = SparkSession.builder.getOrCreate()
df = spark.createDataFrame(data, columns) \
         .withColumn("day", to_date(col("day")))

w = Window.partitionBy("gender").orderBy("day").rowsBetween(Window.unboundedPreceding, Window.currentRow)

df_running = df.withColumn("total", sum_("score_points").over(w)) \
               .select("gender", "day", "total") \
               .orderBy("gender", "day")

df_running.show()
