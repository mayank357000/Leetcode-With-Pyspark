1112. Highest Grade For Each Student
Table: Enrollments

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| student_id    | int     |
| course_id     | int     |
| grade         | int     |
+---------------+---------+
(student_id, course_id) is the primary key of this table.

Write a SQL query to find the highest grade with its corresponding course for each student. 
In case of a tie, you should find the course with the smallest course_id. The output must be sorted by increasing student_id.

The query result format is in the following example:

Enrollments table:
+------------+-------------------+
| student_id | course_id | grade |
+------------+-----------+-------+
| 2          | 2         | 95    |
| 2          | 3         | 95    |
| 1          | 1         | 90    |
| 1          | 2         | 99    |
| 3          | 1         | 80    |
| 3          | 2         | 75    |
| 3          | 3         | 82    |
+------------+-----------+-------+

Result table:
+------------+-------------------+
| student_id | course_id | grade |
+------------+-----------+-------+
| 1          | 2         | 99    |
| 2          | 2         | 95    |
| 3          | 3         | 82    |
+------------+-----------+-------+

------------------------------------------
WITH cte AS (
    SELECT *,
           RANK() OVER (PARTITION BY student_id ORDER BY grade DESC, course_id) AS rnk
    FROM Enrollments
)
SELECT student_id, course_id, grade
FROM cte
WHERE rnk = 1
ORDER BY student_id;

-------------------------

from pyspark.sql import Window
from pyspark.sql.functions import rank, col

window_spec = Window.partitionBy("student_id").orderBy(col("grade").desc(), col("course_id"))

result = (
    enrollments.withColumn("rnk", rank().over(window_spec))
               .filter(col("rnk") == 1)
               .select("student_id", "course_id", "grade")
               .orderBy("student_id")
)

------------------------