177. Nth Highest Salary
Table: Employee

+-------------+------+
| Column Name | Type |
+-------------+------+
| id          | int  |
| salary      | int  |
+-------------+------+

id is the primary key (column with unique values) for this table.
Each row of this table contains information about the salary of an employee.

Write a solution to find the nth highest distinct salary from the Employee table. 
If there are less than n distinct salaries, return null.

The result format is in the following example.

Example 1:

Input: 
Employee table:
+----+--------+
| id | salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+
n = 2

Output: 
+------------------------+
| getNthHighestSalary(2) |
+------------------------+
| 200                    |
+------------------------+
Example 2:

Input: 
Employee table:
+----+--------+
| id | salary |
+----+--------+
| 1  | 100    |
+----+--------+
n = 2

Output: 
+------------------------+
| getNthHighestSalary(2) |
+------------------------+
| null                   |
+------------------------+

---------------------------

CREATE FUNCTION getNthHighestSalary(n INT) RETURNS INT
BEGIN
  RETURN (
    SELECT DISTINCT salary
    FROM Employee
    ORDER BY salary DESC
    LIMIT 1 OFFSET n - 1
  );
END

#LIMIT 1 OFFSET 2, offest se shuru ki rows skip
-------------------------------

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, dense_rank
from pyspark.sql.window import Window

# Sample data
data = [(1, 100), (2, 200), (3, 300)]
columns = ["id", "salary"]

# Create DataFrame
df = spark.createDataFrame(data, columns)

# Define n
n = 2

# Define window spec for ranking distinct salaries
window_spec = Window.orderBy(col("salary").desc())

# Get nth highest distinct salary
nth_salary_df = (
    df.select("salary")
      .distinct()
      .withColumn("rnk", dense_rank().over(window_spec))
      .filter(col("rnk") == n)
)

# Extract result or return None
result = nth_salary_df.select("salary").head()
nth_salary = result.salary if result else None

#OR
result = nth_salary_df.collect()
nth_salary = result[0]["salary"] if result else None
#is [] returns false

print(f"Nth highest salary: {nth_salary}")