612. Shortest Distance in a Plane
Table point_2d holds the coordinates (x,y) 
of some unique points (more than two) in a plane.

Write a query to find the shortest distance 
between these points rounded to 2 decimals.

| x  | y  |
|----|----|
| -1 | -1 |
| 0  | 0  |
| -1 | -2 |

The shortest distance is 1.00 from point (-1,-1) to (-1,2). So the output should be:

| shortest |
|----------|
| 1.00     |

Note: The longest distance among all the points are less than 10000.

---------------------------------
avoid identical points else 0 will come, edge case
--------------------------------

SELECT 
    ROUND(MIN(SQRT(POWER(p1.x - p2.x, 2) + POWER(p1.y - p2.y, 2))), 2) AS shortest
FROM 
    point_2d p1
JOIN 
    point_2d p2 
ON 
    NOT (p1.x = p2.x AND p1.y = p2.y);

----------------------------------

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, sqrt, pow, round, min as min_

# Sample data
data = [(-1, -1), (0, 0), (-1, -2)]
columns = ["x", "y"]

spark = SparkSession.builder.getOrCreate()
df = spark.createDataFrame(data, columns)

cross_df = df.alias("p1").crossJoin(df.alias("p2")) \
    .filter(~((col("p1.x") == col("p2.x")) & (col("p1.y") == col("p2.y")))) \
    .withColumn("distance", sqrt(pow(col("p1.x") - col("p2.x"), 2) + pow(col("p1.y") - col("p2.y"), 2)))

result = cross_df.select(round(min_("distance"), 2).alias("shortest"))
result.show()

