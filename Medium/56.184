184. Department Highest Salary
The Employee table holds all employees. 
Every employee has an Id, a salary, and there is also a column for the department Id.

+----+-------+--------+--------------+
| Id | Name  | Salary | DepartmentId |
+----+-------+--------+--------------+
| 1  | Joe   | 70000  | 1            |
| 2  | Jim   | 90000  | 1            |
| 3  | Henry | 80000  | 2            |
| 4  | Sam   | 60000  | 2            |
| 5  | Max   | 90000  | 1            |
+----+-------+--------+--------------+
The Department table holds all departments of the company.

+----+----------+
| Id | Name     |
+----+----------+
| 1  | IT       |
| 2  | Sales    |
+----+----------+

Write a SQL query to find employees who have the 
highest salary in each of the departments. 
For the above tables, your SQL query should return the following rows 
(order of rows does not matter).

+------------+----------+--------+
| Department | Employee | Salary |
+------------+----------+--------+
| IT         | Max      | 90000  |
| IT         | Jim      | 90000  |
| Sales      | Henry    | 80000  |
+------------+----------+--------+
Explanation:

Max and Jim both have the highest salary in the IT department 
and Henry has the highest salary in the Sales department.

-------------------------------

WITH MaxSalaries AS (
    SELECT DepartmentId, MAX(Salary) AS MaxSalary
    FROM Employee
    GROUP BY DepartmentId
)
SELECT d.Name AS Department, e.Name AS Employee, e.Salary
FROM Employee e
JOIN Department d ON e.DepartmentId = d.Id
JOIN MaxSalaries m ON e.DepartmentId = m.DepartmentId AND e.Salary = m.MaxSalary;

OR

SELECT d.Name AS Department, e.Name AS Employee, e.Salary
FROM (
    SELECT *, DENSE_RANK() OVER (PARTITION BY DepartmentId ORDER BY Salary DESC) AS rnk
    FROM Employee
) e
JOIN Department d ON e.DepartmentId = d.Id
WHERE e.rnk = 1;

-----------------------------

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, max

employee_data = [
    (1, "Joe", 70000, 1),
    (2, "Jim", 90000, 1),
    (3, "Henry", 80000, 2),
    (4, "Sam", 60000, 2),
    (5, "Max", 90000, 1)
]
department_data = [
    (1, "IT"),
    (2, "Sales")
]

emp_df = spark.createDataFrame(employee_data, ["Id", "Name", "Salary", "DepartmentId"])
dept_df = spark.createDataFrame(department_data, ["Id", "Name"])

max_salary_df = (
    emp_df.groupBy("DepartmentId")
          .agg(max("Salary").alias("MaxSalary"))
)

top_earners_df = (
    emp_df.join(max_salary_df, on=["DepartmentId"])
          .filter(col("Salary") == col("MaxSalary"))
)

result_df = (
    top_earners_df.join(dept_df, emp_df.DepartmentId == dept_df.Id)
                 .select(dept_df.Name.alias("Department"), emp_df.Name.alias("Employee"), emp_df.Salary)
)

result_df.show()

OR

from pyspark.sql.window import Window
from pyspark.sql.functions import dense_rank

window_spec = Window.partitionBy("DepartmentId").orderBy(col("Salary").desc())

ranked_df = emp_df.withColumn("rnk", dense_rank().over(window_spec))

top_ranked_df = ranked_df.filter(col("rnk") == 1)

result_df2 = (
    top_ranked_df.join(dept_df, top_ranked_df.DepartmentId == dept_df.Id)
                 .select(dept_df.Name.alias("Department"), top_ranked_df.Name.alias("Employee"), top_ranked_df.Salary)
)

result_df2.show()

-------------------------------