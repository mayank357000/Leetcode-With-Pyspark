2820. Election Results
Description
Table: Votes

+-------------+---------+ 
| Column Name | Type    | 
+-------------+---------+ 
| voter       | varchar | 
| candidate   | varchar |
+-------------+---------+

(voter, candidate) is the primary key (combination of unique values) for this table.
Each row of this table contains name of the voter and their candidate. 
The election is conducted in a city where everyone can vote for one or more 
candidates or choose not to vote. Each person has 1 vote so if they vote for
 multiple candidates, their vote gets equally split across them. For example, 
if a person votes for 2 candidates, these candidates receive an equivalent of 0.5 votes each.

Write a solution to find candidate who got the most votes and won the election. 
Output the name of the candidate or If multiple candidates have an equal number of votes, display the names of all of them.

Return the result table ordered by candidate in ascending order.

The result format is in the following example.

Example 1:

Input: 
Votes table:
+----------+-----------+
| voter    | candidate |
+----------+-----------+
| Kathy    | null      |
| Charles  | Ryan      |
| Charles  | Christine |
| Charles  | Kathy     |
| Benjamin | Christine |
| Anthony  | Ryan      |
| Edward   | Ryan      |
| Terry    | null      |
| Evelyn   | Kathy     |
| Arthur   | Christine |
+----------+-----------+

Output: 
+-----------+
| candidate | 
+-----------+
| Christine |  
| Ryan      |  
+-----------+
Explanation: 
- Kathy and Terry opted not to participate in voting, resulting in their votes being recorded as 0. Charles distributed his vote among three candidates, equating to 0.33 for each candidate. On the other hand, Benjamin, Arthur, Anthony, Edward, and Evelyn each cast their votes for a single candidate.
- Collectively, Candidate Ryan and Christine amassed a total of 2.33 votes, while Kathy received a combined total of 1.33 votes.
Since Ryan and Christine received an equal number of votes, we will display their names in ascending order.

---------------------------------

WITH vote_weights AS (
    SELECT voter, COUNT(*) AS vote_count
    FROM Votes
    WHERE candidate IS NOT NULL
    GROUP BY voter
),
distributed_votes AS (
    SELECT v.candidate, 1.0 / vw.vote_count AS vote_value
    FROM Votes v
    JOIN vote_weights vw ON v.voter = vw.voter
    WHERE v.candidate IS NOT NULL
),
candidate_totals AS (
    SELECT candidate, ROUND(SUM(vote_value), 2) AS total_votes
    FROM distributed_votes
    GROUP BY candidate
),
max_votes AS (
    SELECT MAX(total_votes) AS max_vote FROM candidate_totals
)
SELECT candidate
FROM candidate_totals
JOIN max_votes ON total_votes = max_vote
ORDER BY candidate;

------------------------------

from pyspark.sql import functions as F
from pyspark.sql import Window

df_valid = df.filter(F.col("candidate").isNotNull())

vote_weighted = df_valid.withColumn(
    "vote",
    F.lit(1.0) / F.count("candidate").over(Window.partitionBy("voter"))
)

candidate_totals = vote_weighted.groupBy("candidate").agg(
    F.round(F.sum("vote"), 2).alias("total_votes")
)

max_vote = candidate_totals.agg(F.max("total_votes").alias("max_vote")).collect()[0]["max_vote"]

winners = candidate_totals.filter(F.col("total_votes") == max_vote).orderBy("candidate")

# Final result
winners.show()

