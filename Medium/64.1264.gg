1264. Page Recommendations
SQL Schema 
Table: Friendship

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user1_id      | int     |
| user2_id      | int     |
+---------------+---------+

(user1_id, user2_id) is the primary key for this table.
Each row of this table indicates that there is a friendship 
relation between user1_id and user2_id.
 
Table: Likes

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| user_id     | int     |
| page_id     | int     |
+-------------+---------+

(user_id, page_id) is the primary key for this table.
Each row of this table indicates that user_id likes page_id.

Write an SQL query to recommend pages to the user with user_id = 1 
using the pages that your friends liked. 
It should not recommend pages you already liked.

Return result table in any order without duplicates.

The query result format is in the following example:

Friendship table:
+----------+----------+
| user1_id | user2_id |
+----------+----------+
| 1        | 2        |
| 1        | 3        |
| 1        | 4        |
| 2        | 3        |
| 2        | 4        |
| 2        | 5        |
| 6        | 1        |
+----------+----------+

Likes table:
+---------+---------+
| user_id | page_id |
+---------+---------+
| 1       | 88      |
| 2       | 23      |
| 3       | 24      |
| 4       | 56      |
| 5       | 11      |
| 6       | 33      |
| 2       | 77      |
| 3       | 77      |
| 6       | 88      |
+---------+---------+

Result table:
+------------------+
| recommended_page |
+------------------+
| 23               |
| 24               |
| 56               |
| 33               |
| 77               |
+------------------+

User one is friend with users 2, 3, 4 and 6.
Suggested pages are 23 from user 2, 24 from user 3, 56 from user 3 and 33 from user 6.
Page 77 is suggested from both user 2 and user 3.
Page 88 is not suggested because user 1 already likes it.

-----------------------------
Friends are bi_directional so consider both user1_id and user2_id

---------------------------
WITH friends AS (
    SELECT 
        CASE 
            WHEN user1_id = 1 THEN user2_id 
            ELSE user1_id 
        END AS friend_id
    FROM Friendship
    WHERE user1_id = 1 OR user2_id = 1
),
friends_likes AS (
    SELECT DISTINCT l.page_id
    FROM friends f
    JOIN Likes l ON f.friend_id = l.user_id
    WHERE l.page_id NOT IN/EXCEPT (
        SELECT page_id FROM Likes WHERE user_id = 1
    )
)
SELECT page_id AS recommended_page
FROM friends_likes;

OR

WITH friends AS (
    SELECT user2_id AS friend_id FROM Friendship WHERE user1_id = 1
    UNION ALL
    SELECT user1_id AS friend_id FROM Friendship WHERE user2_id = 1
)

SELECT DISTINCT l.page_id AS recommended_page
FROM Likes l
JOIN (
    SELECT user2_id AS friend_id FROM Friendship WHERE user1_id = 1
    UNION ALL
    SELECT user1_id FROM Friendship WHERE user2_id = 1
) f ON l.user_id = f.friend_id
LEFT JOIN Likes ul ON ul.user_id = 1 AND ul.page_id = l.page_id
WHERE ul.page_id IS NULL;
----------------------------

friends_df = friendship_df \
    .filter(col("user1_id") == 1).select(col("user2_id").alias("friend_id")) \
    .unionAll(friendship_df.filter(col("user2_id") == 1).select(col("user1_id").alias("friend_id")))

friend_likes_df = friends_df.join(likes_df, friends_df.friend_id == likes_df.user_id).select("page_id").distinct()

user_likes_df = likes_df.filter(col("user_id") == 1).select("page_id")

recommended_df = friend_likes_df.join(user_likes_df, on="page_id", how="left_anti")
----------------
from pyspark.sql.functions import when

likes_tagged_df = likes_df.withColumn(
    "is_user1", when(col("user_id") == 1, 1).otherwise(0)
)

friends_df = friendship_df \
    .filter(col("user1_id") == 1).select(col("user2_id").alias("friend_id")) \
    .unionAll(friendship_df.filter(col("user2_id") == 1).select(col("user1_id").alias("friend_id")))

friend_likes_df = friends_df.join(likes_tagged_df, friends_df.friend_id == likes_tagged_df.user_id)

recommended_df = friend_likes_df.filter(col("is_user1") == 0).select("page_id").distinct()

--------------------

friends_df = friendship_df \
    .filter(col("user1_id") == 1).select(col("user2_id").alias("friend_id")) \
    .unionAll(friendship_df.filter(col("user2_id") == 1).select(col("user1_id").alias("friend_id")))

friend_likes_df = friends_df.join(likes_df, friends_df.friend_id == likes_df.user_id).select("page_id").distinct()

user1_likes_df = likes_df.filter(col("user_id") == 1).select("page_id").distinct()

recommended_df = friend_likes_df.exceptAll(user1_likes_df)