1517. Find Users With Valid E-Mails
Easy
Topics
premium lock icon
Companies
SQL Schema
Pandas Schema
Table: Users

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
| mail          | varchar |
+---------------+---------+
user_id is the primary key (column with unique values) for this table.
This table contains information of the users signed up in a website. Some e-mails are invalid.
 

Write a solution to find the users who have valid emails.

A valid e-mail has a prefix name and a domain where:

The prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.', and/or dash '-'. The prefix name must start with a letter.
The domain is '@leetcode.com'.
Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Users table:
+---------+-----------+-------------------------+
| user_id | name      | mail                    |
+---------+-----------+-------------------------+
| 1       | Winston   | winston@leetcode.com    |
| 2       | Jonathan  | jonathanisgreat         |
| 3       | Annabelle | bella-@leetcode.com     |
| 4       | Sally     | sally.come@leetcode.com |
| 5       | Marwan    | quarz#2020@leetcode.com |
| 6       | David     | david69@gmail.com       |
| 7       | Shapiro   | .shapo@leetcode.com     |
+---------+-----------+-------------------------+
Output: 
+---------+-----------+-------------------------+
| user_id | name      | mail                    |
+---------+-----------+-------------------------+
| 1       | Winston   | winston@leetcode.com    |
| 3       | Annabelle | bella-@leetcode.com     |
| 4       | Sally     | sally.come@leetcode.com |
+---------+-----------+-------------------------+
Explanation: 
The mail of user 2 does not have a domain.
The mail of user 5 has the # sign which is not allowed.
The mail of user 6 does not have the leetcode domain.
The mail of user 7 starts with a period.

-----------------------------------------------------

SELECT *
FROM Users
WHERE mail REGEXP '^[A-Za-z][A-Za-z0-9_.-]*@leetcode\\.com$';

---------------------------------

valid_df = users_df.filter(col("mail").rlike(r"^[A-Za-z][A-Za-z0-9_.-]*@leetcode\.com$"))

-------------------

usign UDF:

from pyspark.sql.functions import col, substring_index, instr

# Step 1: Ensure the email ends with '@leetcode.com'
domain_filtered = users_df.filter(col("mail").endswith("@leetcode.com"))

# Step 2: Split the prefix (before @) and validate it manually
# Get prefix by splitting on '@'
with_prefix = domain_filtered.withColumn("prefix", substring_index(col("mail"), "@", 1))

# Step 3: Filter prefix:
# - First character must be a letter (A–Z or a–z)
# - All characters must be from allowed set: letters, digits, '_', '.', '-'

allowed_chars = set("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.-")

def is_valid_prefix(s):
    return s and s[0].isalpha() and all(c in allowed_chars for c in s)

from pyspark.sql.functions import udf
from pyspark.sql.types import BooleanType

is_valid_prefix_udf = udf(is_valid_prefix, BooleanType()) #function name and returnType

# Step 4: Apply filter
final_df = with_prefix.filter(is_valid_prefix_udf(col("prefix"))).drop("prefix")