3436. Find Valid Emails
Description
Table: Users

++
\| Column Name     \| Type    \|
++
\| user_id         \| int     \|
\| email           \| varchar \|
++
(user_id) is the unique key for this table.
Each row contains a user's unique ID and email address.

Write a solution to find all the valid email addresses. A valid email address meets the following criteria:

It contains exactly one @ symbol.
It ends with .com.
The part before the @ symbol contains only alphanumeric characters and underscores.
The part after the @ symbol and before .com contains a domain name that contains only letters.
Return the result table ordered by user_id in ascending order.

Example:

Input:

Users table:

++
\| user_id \| email               \|
++
\| 1       \| alice@example.com   \|
\| 2       \| bob_at_example.com  \|
\| 3       \| charlie@example.net \|
\| 4       \| david@domain.com    \|
\| 5       \| eve@invalid         \|
++

Output:

++-+
\| 1       \| alice@example.com \|
\| 4       \| david@domain.com  \|
+----+
Explanation:

alice@example.com is valid because it contains one @, alice is alphanumeric, and example.com starts with a letter and ends with .com.
bob_at_example.com is invalid because it contains an underscore instead of an @.
charlie@example.net is invalid because the domain does not end with .com.
david@domain.com is valid because it meets all criteria.
eve@invalid is invalid because the domain does not end with .com.
Result table is ordered by user_id in ascending order.

---------------------
SELECT 
    user_id, 
    email
FROM 
    Users
WHERE 
    email REGEXP '^[a-zA-Z0-9_]+@[a-zA-Z]+\\.com$'
ORDER BY 
    user_id ASC;

---------------------

can use this kind of UDF too:

from pyspark.sql.functions import col, udf
from pyspark.sql.types import BooleanType

def is_valid_email(email):
    if not email or '@' not in email:
        return False
    if email.count('@') != 1 or not email.endswith('.com'):
        return False
    
    try:
        local_part, domain_part = email.split('@')
        domain_name = domain_part[:-4]  # remove '.com'
        
        # Local part must be alphanum or underscore
        if not all(c.isalnum() or c == '_' for c in local_part):
            return False
        
        # Domain part must be only letters
        if not domain_name.isalpha():
            return False
        
        return True
    except:
        return False

validate_email_udf = udf(is_valid_email, BooleanType())

valid_df = df.filter(validate_email_udf(col("email"))) \
             .orderBy(col("user_id").asc())

#df.select("user_id", validate_email_udf(col("email")).alias("is_valid"))
#df = df.withColumn("email_valid_flag", validate_email_udf(col("email")))
#df = df.withColumn("email_valid_flag", validate_email_udf(col("email")))

#can be used in filter and in place of col() 