1435. Create a Session Bar Chart
SQL Schema 
Table: Sessions

+---------------------+---------+
| Column Name         | Type    |
+---------------------+---------+
| session_id          | int     |
| duration            | int     |
+---------------------+---------+
session_id is the primary key for this table.
duration is the time in seconds that a user has visited the application.
 

You want to know how long a user visits your application. You decided to create bins of "[0-5>", "[5-10>", "[10-15>" and "15 minutes or more" and count the number of sessions on it.

Write an SQL query to report the (bin, total) in any order.

The query result format is in the following example.

Sessions table:
+-------------+---------------+
| session_id  | duration      |
+-------------+---------------+
| 1           | 30            |
| 2           | 299           |
| 3           | 340           |
| 4           | 580           |
| 5           | 1000          |
+-------------+---------------+

Result table:
+--------------+--------------+
| bin          | total        |
+--------------+--------------+
| [0-5>        | 3            |
| [5-10>       | 1            |
| [10-15>      | 0            |
| 15 or more   | 1            |
+--------------+--------------+

For session_id 1, 2 and 3 have a duration greater or equal than 0 minutes and less than 5 minutes.
For session_id 4 has a duration greater or equal than 5 minutes and less than 10 minutes.
There are no session with a duration greater or equial than 10 minutes and less than 15 minutes.
For session_id 5 has a duration greater or equal than 15 minutes.
------------------------------------------------

WITH bins AS (
    SELECT
    ,*
        CASE
            WHEN duration >= 0 AND duration < 300 THEN '[0-5>'
            WHEN duration >= 300 AND duration < 600 THEN '[5-10>'
            WHEN duration >= 600 AND duration < 900 THEN '[10-15>'
            ELSE '15 or more'
        END AS bin
    FROM Sessions
)
SELECT
    bin,
    COUNT(*) AS total -- count(*) does not return null, 0 if not found
FROM bins
GROUP BY bin;
----PROBLEM WITHT THIS ONE : - it wonâ€™t report bins with no sessions, like [10-15> in your sample case.
---- WE NEED STRICT 4 COLS, SO WILL UNION AND SOLVE THIS


-- WITH all_bins AS (
--     SELECT '[0-5>' AS bin UNION ALL
--     SELECT '[5-10>' UNION ALL
--     SELECT '[10-15>' UNION ALL
--     SELECT '15 or more'
-- ),
-- session_bins AS (
--     SELECT
--         CASE
--             WHEN duration >= 0 AND duration < 300 THEN '[0-5>'
--             WHEN duration >= 300 AND duration < 600 THEN '[5-10>'
--             WHEN duration >= 600 AND duration < 900 THEN '[10-15>'
--             ELSE '15 or more'
--         END AS bin
--     FROM Sessions
-- ),
-- bin_counts AS (
--     SELECT bin, COUNT(*) AS total
--     FROM session_bins
--     GROUP BY bin
-- )
-- SELECT
--     a.bin,
--     COALESCE(b.total, 0) AS total
-- FROM all_bins a
-- LEFT JOIN bin_counts b ON a.bin = b.bin;

----------------------------------

SELECT '[0-5>' AS bin,
  SUM(duration <= 300) AS total
FROM Sessions
UNION ALL
SELECT '[5-10>' AS bin,
  SUM(
    duration > 300
    AND duration <= 600
  ) AS total
FROM Sessions
UNION ALL
SELECT '[10-15>' AS bin,
  SUM(
    duration > 600
    AND duration <= 900
  ) AS total
FROM Sessions
UNION ALL
SELECT '15 or more' AS bin,
  SUM(duration > 900) AS total
FROM Sessions 

------------------
SUM(duration <= 300) == is same as SUM(
  CASE WHEN duration <= 300 THEN 1 ELSE 0 END
)

count 1 for every condition match else 0

---------------------------------

from pyspark.sql import functions as F
from pyspark.sql import SparkSession

spark = SparkSession.builder.getOrCreate()

# Reference bin definitions
bin_df = spark.createDataFrame(
    [("[0-5>",), ("[5-10>",), ("[10-15>",), ("15 or more",)],
    ["bin"]
)

# Actual binned sessions
binned_sessions = df.withColumn(
    "bin",
    F.when((df.duration >= 0) & (df.duration < 300), "[0-5>")
     .when((df.duration >= 300) & (df.duration < 600), "[5-10>")
     .when((df.duration >= 600) & (df.duration < 900), "[10-15>")
     .otherwise("15 or more")
)

# Count sessions per bin
actual_counts = binned_sessions.groupBy("bin").agg(F.count("*").alias("total"))

# Left join to ensure all bins are present
result = bin_df.join(actual_counts, on="bin", how="left").fillna(0)
result.show()

--------------------------
from pyspark.sql.functions import sum as spark_sum

result2 = df.selectExpr(
    "'[0-5>' as bin", "SUM(duration >= 0 AND duration < 300) as total"
).unionAll(
    df.selectExpr(
        "'[5-10>' as bin", "SUM(duration >= 300 AND duration < 600) as total"
    )
).unionAll(
    df.selectExpr(
        "'[10-15>' as bin", "SUM(duration >= 600 AND duration < 900) as total"
    )
).unionAll(
    df.selectExpr(
        "'15 or more' as bin", "SUM(duration >= 900) as total"
    )
)

result2.show()