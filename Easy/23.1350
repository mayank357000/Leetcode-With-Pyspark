1350. Students With Invalid Departments

SQL Schema 
Table: Departments

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| name          | varchar |
+---------------+---------+
id is the primary key of this table.
The table has information about the id of each department of a university.
 

Table: Students

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| name          | varchar |
| department_id | int     |
+---------------+---------+
id is the primary key of this table.
The table has information about the id of each student at a university and the id of the department he/she studies at.
 

Write an SQL query to find the id and the name of all students who are enrolled in departments that no longer exists.

Return the result table in any order.

The query result format is in the following example:

Departments table:
+------+--------------------------+
| id   | name                     |
+------+--------------------------+
| 1    | Electrical Engineering   |
| 7    | Computer Engineering     |
| 13   | Bussiness Administration |
+------+--------------------------+

Students table:
+------+----------+---------------+
| id   | name     | department_id |
+------+----------+---------------+
| 23   | Alice    | 1             |
| 1    | Bob      | 7             |
| 5    | Jennifer | 13            |
| 2    | John     | 14            |
| 4    | Jasmine  | 77            |
| 3    | Steve    | 74            |
| 6    | Luis     | 1             |
| 8    | Jonathan | 7             |
| 7    | Daiana   | 33            |
| 11   | Madelynn | 1             |
+------+----------+---------------+

Result table:
+------+----------+
| id   | name     |
+------+----------+
| 2    | John     |
| 7    | Daiana   |
| 4    | Jasmine  |
| 3    | Steve    |
+------+----------+

John, Daiana, Steve and Jasmine are enrolled in departments 14, 33, 74 and 77 respectively. department

-----------------------------------
can use not in or join and not null

SELECT id, name
FROM Students
WHERE department_id NOT IN (SELECT id FROM Departments);

OR

SELECT s.id, s.name
FROM Students s
LEFT JOIN Departments d
    ON s.department_id = d.id
WHERE d.id IS NULL;

---------------------------------
from pyspark.sql.functions import col

result_df = s_df.join(d_df, s_df.department_id == d_df.id, "left") \
    .filter(col("id").isNull()) \
    .select(s_df.id, s_df.name)

OR

invalid_dept_ids = [row.id for row in s_df.select("department_id").distinct().collect()
                    if row.id not in [d.id for d in d_df.select("id").distinct().collect()]]

result_df = s_df.filter(col("department_id").isin(invalid_dept_ids)) \
    .select("id", "name")

#col.isin(python list as input, (so use .collect() to make list from df)) to check values, returns true,false, used for filter  
#df.filter(~col("department_id").isin([1, 7, 13])), NOT IN LOGIC
