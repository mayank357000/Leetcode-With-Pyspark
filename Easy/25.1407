Table: Users

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| name          | varchar |
+---------------+---------+
id is the column with unique values for this table.
name is the name of the user.
 

Table: Rides

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| user_id       | int     |
| distance      | int     |
+---------------+---------+
id is the column with unique values for this table.
user_id is the id of the user who traveled the distance "distance".
 

Write a solution to report the distance traveled by each user.

Return the result table ordered by travelled_distance in descending order, if two or more users traveled the same distance, order them by their name in ascending order.

The result format is in the following example.

 

Example 1:

Input: 
Users table:
+------+-----------+
| id   | name      |
+------+-----------+
| 1    | Alice     |
| 2    | Bob       |
| 3    | Alex      |
| 4    | Donald    |
| 7    | Lee       |
| 13   | Jonathan  |
| 19   | Elvis     |
+------+-----------+
Rides table:
+------+----------+----------+
| id   | user_id  | distance |
+------+----------+----------+
| 1    | 1        | 120      |
| 2    | 2        | 317      |
| 3    | 3        | 222      |
| 4    | 7        | 100      |
| 5    | 13       | 312      |
| 6    | 19       | 50       |
| 7    | 7        | 120      |
| 8    | 19       | 400      |
| 9    | 7        | 230      |
+------+----------+----------+
Output: 
+----------+--------------------+
| name     | travelled_distance |
+----------+--------------------+
| Elvis    | 450                |
| Lee      | 450                |
| Bob      | 317                |
| Jonathan | 312                |
| Alex     | 222                |
| Alice    | 120                |
| Donald   | 0                  |
+----------+--------------------+
Explanation: 
Elvis and Lee traveled 450 miles, Elvis is the top traveler as his name is alphabetically smaller than Lee.
Bob, Jonathan, Alex, and Alice have only one ride and we just order them by the total distances of the ride.
Donald did not have any rides, the distance traveled by him is 0.

---------------------------------------
select u.name as name,ifnull(sum(distance),0) as travelled_distance
from Users u left join rides r on u.id=r.user_id
group by u.id,u.name
order by travelled_distance desc,name asc;

-------------------------------------

from pyspark.sql.functions import sum, col, coalesce

result_df = u_df.join(r_df, u_df.id == r_df.user_id, how="left") \
    .groupBy(u_df.id, u_df.name) \
    .agg(coalesce(sum(r_df.distance), lit(0)).alias("travelled_distance")) \
    .orderBy(col("travelled_distance").desc(), u_df.name.asc())

--.desc() does not sort the column by itselfâ€”it just creates a Column object with a descending sort order instruction.

-- #can use df_name.column for columns that exist in the original DataFrame (like u_df.name or u_df.id) before or during transformations such as join, groupBy, and select.

-- #However, for new columns created by aggregation(inside agg we make col.alias()) or withColumn (like your alias "travelled_distance"), you must use col("travelled_distance")

--agg(count/sum/avg/min/max ka alias krna to make col name)

-- #can rename df if want to use col() only
-- u = u_df.alias("u")
-- r = r_df.alias("r")
-- result_df = u.join(r, u.id == r.user_id, "left")
-- result_df.orderBy(col("u.name").desc())